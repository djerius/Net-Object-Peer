181:	hit eof while in pod documentation (no =cut seen)
	this can cause trouble with some pod utilities
#PODNAME: Net::Object::Peer::Cookbook
#ABSTRACT: Recipes for Net::Object::Peer

# COPYRIGHT

=head1 RECIPES

=head2 Loop Detection

In a situation where an event handler may itself emit an event it's
possible to generate event loops.

Here's a node class which accepts a single class of event. When a node
receives an event, it also emits the same event.

The event handler has a loop detector which will bail if the handler
processes an event from an emitter more than once while the handler is
itself emitting the event.

 # examples/Loop.pm
# EXAMPLE: examples/Loop.pm


Now, let's set up a loop:

 # examples/loop.pl
# EXAMPLE: examples/loop.pl

And the result:

 % perl examples/loop.pl Loop
# COMMAND: perl -Ilib examples/loop.pl Loop

To protect all event handlers, we can modify
L<build_sub|Net::Object::Peer/build_sub> so that it adds loop
detection to every handler.  Here's a first attempt, which wraps
the standard event handler in a subroutine:

 # examples/LoopWrap.pm
# EXAMPLE: examples/LoopWrap.pm

And the result:

 % perl examples/loop.pl LoopWrap
# COMMAND: perl -Ilib examples/loop.pl LoopWrap

Here's an alternative, taking advantage of the fact that
L<build_sub|Net::Object::Peer/build_sub> returns a coderef generated
by L<Sub::Quote/quote_sub>, so our loop detection code can be inlined
directly into the event handler. Note that L<Sub::Quote> keeps
I<copies> of the values referenced in C<%capture>, so handling of
references to objects are slightly complicated.  C<$self> is weakened
to avoid memory leaks, but copies of references turn into strong
references, so instead a I<reference> to the weakened reference is
passed.

 # examples/LoopQuote.pm
# EXAMPLE: examples/LoopQuote.pm

And the result:

 % perl examples/loop.pl LoopQuote
# COMMAND: perl -Ilib examples/loop.pl LoopQuote

=head2 Translation/Proxy Nodes

Nodes in a network communicate via a common vocabulary of named
events.  The problem at hand is how to subscribe to a node which uses
a different naming scheme (but assumedly similar meanings).

Let's start with a base C<Node> class:

 # examples/translate/Node.pm
# EXAMPLE: examples/translate/Node.pm

and two subclasses, in one of which the C<doit> method emits an C<A> event

 # examples/translate/NodeA.pm
# EXAMPLE: examples/translate/NodeA.pm

and in the other the C<doit> method emits a C<B> event

 # examples/translate/NodeB.pm
# EXAMPLE: examples/translate/NodeB.pm

C<NodeA> expects an C<A> event from a C<doit()> action, but C<NodeB>
emits a C<B> event: obviously a failure to communicate.

=head3 Override the event Handler

One approach to translating the C<B> event to an C<A> one is to
override C<NodeA>'s default event handler for a C<B> event:

 #examples/translate_override.pl
# EXAMPLE: examples/translate_override.pl

 % perl examples/translate_override.pl
# COMMAND: perl examples/translate_override.pl

However, this complicates instrospection of C<$nA>'s subscriptions of
C<A> events, as an C<A> event might actually be a C<B> event.

=head3 Proxy Node

Another approach is to create a proxy node which translates events.

 # examples/translate/TranslateBtoA.pm
# EXAMPLE: examples/translate/TranslateBtoA.pm

Things to note:

=over

=item *

The object stores a weak reference to the node it's a proxy
for.  Technically a reference is only needed for the subscription.

=item *

When resending the event, the proxy object

=over

=item *

masquerades as the upstream emitter via the C<emitter> option; and

=item *

sets the C<addr> attribute to its own, so that the outgoing event
will correctly identify the proxy object.

=back

=item *

The proxy subscribes to the emitter's C<detach> event in addition to
the one it will translate so that it can, in turn, send a C<detach>
event to it's listeners.

=back

Here's code to use it:

 # examples/translate_in_scope.pl
# EXAMPLE: examples/translate_in_scope.pl

with the result:

 % perl examples/translate_in_scope.pl
# COMMAND: perl examples/translate_in_scope.pl

In this approach, there's an extra object (C<$xlate>) to keep track of.  Since
B<Net::Object::Peer> uses only weak references, when C<$xlate> goes out of
scope, the subscription will cease to do anything.  For example,

 # examples/translate_out_of_scope.pl
# EXAMPLE: examples/translate_out_of_scope.pl

with the result:

 % perl examples/translate_out_of_scope.pl
# COMMAND: perl examples/translate_out_of_scope.pl

I.e, nothing.


One solution is to add the C<Net::Object::Peer::Ephemeral> role to the
proxy class.

 # examples/translate/TranslateBtoAEphemeral.pm
# EXAMPLE: examples/translate/TranslateBtoAEphemeral.pm

This instructs C<Net::Object::Peer> to store a strong reference, so the following
code

 # examples/translate_ephemeral.pl
# EXAMPLE: examples/translate_ephemeral.pl

works:

 % perl examples/translate_ephemeral.pl
# COMMAND: perl examples/translate_ephemeral.pl
